(+ 1 2
(+ 1 2))
(+ 1 2) (+ 1 2)

42
(42)
(+ 1 2)
(- 3 2)
(* 6 7)
(/ 8 6)
(+ 1 2 3 4)
(* (+ 2 4) 7)
(< 3 4)
(and T T)
(OR T NIL)
(xor t nil)
(or (> 3 4) (> 4 2))
(quote (hello world))
(quote hello world)
()
(= NIL ())
(1 2 3)
(quote (+ 1 2))
(car (quote (1 2 3 4 5)))
(car (quote ((1 2) 3)))
(car (1 2 3 4 5))
(car 1)
(cdr (quote (1 2 3 4 5)))
(cdr (quote (+ 1 2 3)))
(cdr (quote (1)))
(cdr ())
(car (cdr (quote (1 2 3))))
(car (cdr (cdr (quote (1 2 3)))))
(cons 1 (quote (2 3)))
(cons 1 (cons 2 (quote (3))))
(cons 1 (cons 2 (cons 3 nil)))
(cons 3 nil)
(append (quote (3 3)) (quote (4 4)))
(append (quote ((3))) (quote (4 4)))
(append nil nil)
(list 1 1 1 1)
(list (quote (2 3)) (quote (2)) 1 2)
(atom (quote a))
(atom (quote (3)))
(atom ())
1
a
(setq a 5)
a
(setq a 6)
a
(cons a (quote (3)))
(setq a (quote b))
(cons a (quote (3)))
(setq a (quote (1 2 3)))
(cdr a)
(atom (+ 1 1))
(atom (quote (3)))
(null nil)
(null ())
(null (car (quote (3))))
(equal (quote s) (quote s))
(equal (quote (s)) (quote (s)))
(quote ())
(quote nil)
(defun 2nd (x) (car (cdr x)))
(2nd (quote (1 2 3)))
(2nd)
x
(defun empty nil nil)
(empty)
(defun one nil 1)
(one)
(defun error 1 1)
(first (quote (1 2 3)))
(last (quote (1 2 3)))
(defun ends (x) (cons (first x) (last x)))
(ends (quote (1 2 3)))
(defun max2 (a b) (if (> a b) a b))
(max2 2 3)
(abs -3)
(defun abs2 (x) (if (> x 0) x (- 0 x)))
(abs2 -3)
(defun dseq (x) (if (= x 1) 0 (+ (dseq (- x 1)) 2)))
(dseq 1)
(dseq 2)
(dseq 4)
(dseq 99)
(defun len (x) (if (null x) 0 (+ (len (cdr x)) 1)))
(len (quote (a b c d)))
(len ())
(len T)
(len nil)
(defun null2 (x) (if (equal x nil) t nil))
(null2 t)
(null2 nil)
(null2 (quote 1))
(defun and2 (x y) (if (equal x nil) nil (if (not (equal y nil)) t nil)))
(and2 T T)
(and2 T nil)
(and2 nil T)
(and2 nil nil)
(defun or2 (x y) (if (equal x t) t (if (equal y t) t nil)))
(or2 T T)
(or2 T nil)
(or2 nil T)
(or2 nil nil)
exit
